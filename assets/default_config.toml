[game]
# Games with up to 8 players are supported
min_players = 2
max_players = 2
# Whether the map is symmetric for all the players.
# if 'symmetric' = true CG Arena will play 1 match per seed.
# if 'symmetric' = false CG Arena will play n! matches per seed, where n is the amount of players.
symmetric = true

# matchmaking prioritizes bots which played less than 'min_matches' matches with probability 'min_matches_preference'
# otherwise matchmaking picks bots randomly
# note: matches would always have distinct bots
[matchmaking]
min_matches = 200
min_matches_preference = 1.0

# supported algorithms: ["OpenSkill", "TrueSkill", "Elo"]
[ranking]
algorithm = "OpenSkill"

# 'port' controls web server port. If 'port' is omitted then OS assigns some available port
# 'expose' controls whether to expose web server to the local network
[server]
# port = 1234
expose = false

[log]
level = "INFO"
file = "cgarena.log"

# list of the arena workers, currently only list with single "embedded" worker is supported
# use 'type' = "embedded" for worker embedded into arena
# 'threads' controls how many games can be run in parallel
# 'cmd_play_match' is a command to run single match, should print JSON to stdout in the following format:
#   { "ranks" [..], "errors": [..], "attributes": [..] }
#   where "ranks" - list of numbers where i-th number is i-th match participant final placement (e.g. 0 for winner). Duplicates are allowed in case of draw.
#   where "errors" - list of numbers where i-th number is 1 if i-th match participant failed during match or 0 otherwise
#   where "attributes" - list of match attributes emitted by the bot. Each attribute is json object with the following fields:
#       - "name" - name of attribute
#       - "player" - index of a player who the attribute belongs to (or null if it's match attribute, not specific to a particular bot)
#       - "turn" - turn of the attribute (or null if the attribute is not specific to any particular turn)
#       - "value" - attribute value (integer, float or string)
#
# 'cmd_build' is a command to build a bot
# 'cmd_run' is a command to run bot
# the above commands will have the following replacements applied:
# - {SEED} would be replaced with match seed
# - {P1}, {P2}, etc. would be replaced with 'cmd_run' configured for match participant 1, 2, etc.
# - {PLAYERS} would be replaced with concatenated version of the above. Please use this when game can have varying player counts.
# - {DIR} would be replaced with target bot's directory
# - {LANG} would be replaced with target bot's language
# 'cmd_build' should assume bot folder {DIR} contains "source.txt" file with the bot's source code
# 'cmd_build' should output bot's executable to the same folder
[[workers]]
type = "embedded"
threads = 1
cmd_play_match = "python play_game.py {SEED} {PLAYERS}"
cmd_build = "g++ -std=c++20 -x c++ {DIR}/source.txt -o {DIR}/a"
cmd_run = "./{DIR}/a"

# or a generic version
# cmd_run = "sh run.sh {DIR} {LANG}"
# cmd_build = "sh build.sh {DIR} {LANG}"
